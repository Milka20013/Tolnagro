@page "/customers"
@attribute [StreamRendering]

@inject GeneratedAPI apiClient
@inject IDialogService dialogService
@inject CustomerService customerService
@inject NavigationManager navigationManager

<div class="customer-page">
    <PageTitle>Ügyfelek</PageTitle>

    <h1>Ügyfelek</h1>

    @if (loading)
    {
        <p><em>Töltés...</em></p>
    }
    else
    {
        <div class="card-container">
            @if (customers != null)
            {
                foreach (var customer in customers)
                {
                    <CustomerCard StatusIcon="@GetStatusIcon(customer)" Content="@customer.Name" @onclick="() => NavigateToCustomerPage(customer.Id)"></CustomerCard>
                }
            }
            <MudButton OnClick="OpenAddCustomerDialogAsync" Color="Color.Primary" Variant="Variant.Filled">Ügyfél hozzáadása</MudButton>
        </div>
    }

</div>

@code {
    public bool loading = true;
    public List<Customer> customers = new();
    protected override async Task OnInitializedAsync()
    {
        var customers = await apiClient.GetAllCustomersAsync();
        this.customers = customers.ToList();
        loading = false;
        customerService.OnCustomerAdded += OnCustomerCreated;
    }

    private string GetStatusIcon(Customer customer)
    {
        if (customer.IsHistoryChecked)
        {
            return Icons.Material.Filled.CheckCircle;
        }
        else
        {
            return Icons.Material.Filled.Warning;
        }
    }

    private Task OpenAddCustomerDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return dialogService.ShowAsync<CustomerAddPopup>("Simple Dialog", options);
    }

    public void OnCustomerCreated(Customer customer)
    {
        customers.Add(customer);
        StateHasChanged();
    }

    public void NavigateToCustomerPage(string customerId)
    {
        navigationManager.NavigateTo("customer/" + customerId);
    }

}
